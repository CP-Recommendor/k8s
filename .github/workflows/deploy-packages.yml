name: Create and publish a Docker image

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        id: login
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker-compose-generated.yaml
        run: |
          ./generate.sh
      - name: Build the hello-docker Docker image
        run: |

          image_names=$(jq -r '.models[].serviceName' ./config.json)
          paths=$(jq -r '.models[].modelBasePath' ./config.json)
          readarray -t image_array <<< "$image_names"
          readarray -t paths_array <<< "$paths"
          
          branch="${{ github.ref }}"
          branch=${branch#refs/heads/} # Remove the 'refs/heads/' prefix
          git fetch origin $branch
          git log
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            previous_commit=$(git rev-parse "origin/${branch}")
          fi
          if [ "${{ github.event_name }}" = "push" ]; then
            previous_commit=$(git rev-parse "origin/${branch}@{1}")
          fi

          for index in "${!image_array[@]}"; do
            image="${image_array[index]}"
            path="${paths_array[index]}"
            
            if [ -z "$previous_commit" ]; then
              echo "No previous commit. Building ${image} for branch '${branch}'..."
              echo "::set-output name=changed::$true"
            elif git diff --quiet "$previous_commit..HEAD" -- "./$path"; then
              echo "No changes in ${image} for branch '${branch}'"
              echo "::set-output name=changed::$false"
            else
              echo "Changes detected in ${image} for branch '${branch}'"
              echo "::set-output name=changed::$true"
            fi
          done