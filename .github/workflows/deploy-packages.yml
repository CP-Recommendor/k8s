name: Create and publish a Docker image

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        id: login
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker-compose-generated.yaml
        run: |
          ./generate.sh
      - name: Build the hello-docker Docker image
        run: |

          image_names=$(jq -r '.models[].serviceName' ./config.json)
          paths=$(jq -r '.models[].modelBasePath' ./config.json)
          readarray -t image_array <<< "$image_names"
          readarray -t paths_array <<< "$paths"
          
          branch="${{ github.ref }}"
          branch=${branch#refs/heads/} # Remove the 'refs/heads/' prefix
          commit_history=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/commits?sha=${main}&per_page=2")
          
          last_commit=$(echo "$commit_history" | jq -r '.[0].sha')
          second_last_commit=$(echo "$commit_history" | jq -r '.[1].sha')

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            previous_commit=$last_commit
          fi
          if [ "${{ github.event_name }}" = "push" ]; then
            previous_commit=$second_last_commit
          fi
          
          echo $previous_commit
          current_commit=$(git rev-parse HEAD)
          echo $current_commit
          for index in "${!image_array[@]}"; do
            image="${image_array[index]}"
            path="${paths_array[index]}"
            
            if git diff --quiet $previous_commit $current_commit -- "./$path"; then
              echo "No changes in ${image} for branch '${branch}'"
              echo "::set-output name=changed::$false"
            else
              echo "Changes detected in ${image} for branch '${branch}'"
              echo "::set-output name=changed::$true"
            fi
          done